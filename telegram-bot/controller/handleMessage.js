const getKeyboard = require('./getKeyboard');

module.exports = bot => {

  return async msg => {
    const chatId = msg.chat.id;
    const { text } = msg;

    if (text.trim() === '/start') return;
  
    switch(text) {
      case 'üíµ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø':
          await bot.sendMessage(chatId, '–¢–æ–≤–∞—Ä—ã', {
            reply_markup: {
              inline_keyboard: await getKeyboard()
            }
          })
        break
      case '‚åõÔ∏è –ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã':
          await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤')
        break
      case 'üë©üèª‚Äçüíª –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞':
          await bot.sendMessage(chatId, '–ù–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å—é–¥–∞ darkhelper')
        break
      default: 
        await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
          reply_markup: {
            keyboard: [
              [{text: 'üíµ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø' }, {text: '‚åõÔ∏è –ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã' }],
              [{text: 'üë©üèª‚Äçüíª –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞'}]
            ],
            resize_keyboard: true
          }
        })
    }
  }
}